/*
* Test Comments
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	dmult = '**';
	div = '/';
	assign = '=';
	exclam = '!';
	dictt = 'dict';
	def = 'def';
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	qmark = '?';
	gqmark = ';';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	print = 'print';
	return = 'return';
	assert='assert';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	quote = '"';
	import = 'import';
	as = 'as';
	from = 'from';
	in='in';
	dot = '.'
	and = 'and';
	or = 'or';
	not = 'not';
	none = 'None'
	geq = '>='
	leq = '<='
	neq = '!='
	equals = '=='
	merge_minus='-=';
	merge_plus='+=';
	merge_divesion='/=';a
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	num = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string = '"'not_eol* '"';

Ignored Tokens
	blank, line_comment;


Productions

    goal = command*;

    command = {function} function|
            {statement} statement;

    function = def identifier l_par argument? r_par semi statement;

    argument = identifier eq_val? comma_identifier*;

    eq_val = assign value;

    comma_identifier = comma identifier eq_val?;

    statement = {function_call} tab* function_call|
                    {if} tab* if comparison semi statement|
                    {while} tab* while comparison semi statement|
                    {for} tab* for identifier semi identifier semi statement|
                    {return} tab* return expression|
                    {print} tab* print expression comma_expression*;

    expression = {function_call} function_call|
                    {value} value|
                    {identifier} identifier;

    comparison = {and_comparison} comparison and comparison|
                    {not_comparison} comparison not comparison|
                    {or_comparison} comparison or comparison|
                    {less} expression less expression|
                    {great} expression great expression|
                    {geq} expression geq expression|
                    {leq} expression leq expression|
                    {neq} expression neq expression|
                    {equals} expression equals expression|
                    {true} true|
                    {false} false;


	comma_expression = comma expression;

	function_call = identifier l_par arglist? r_par;

	arglist = expression comma_expression*;

    value = {idperiodfunccall} identifier function_call |
    			{number} number |
    			{string} string |
    			{none} none;

    identifier = id;

    number = num;




