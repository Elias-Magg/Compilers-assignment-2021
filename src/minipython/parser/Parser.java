/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(4), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(4), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(4), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(4), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(4), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(4), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(4), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(4), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(4), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(4), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(4), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(6), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(7), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(7), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(8), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(8), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(8), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(8), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(8), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(8), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(8), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(8), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(8), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(8), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(8), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(8), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(8), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(8), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(8), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(8), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(8), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(8), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(8), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(8), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(8), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(8), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(8), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(8), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(9), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(9), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(9), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(9), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(9), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(9), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(9), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(10), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(11), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(11), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(12), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(12), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(12), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(12), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(12), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(13), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(13), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(13), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(13), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(14), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(14), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(14), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(14), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(15), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(15), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(16), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(16), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(17), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(17), list);
		    }
		    break;


                    case 80:
		    {
			ArrayList list = new80();
			push(goTo(18), list);
		    }
		    break;


                    case 81:
		    {
			ArrayList list = new81();
			push(goTo(18), list);
		    }
		    break;


                    case 82:
		    {
			ArrayList list = new82();
			push(goTo(18), list);
		    }
		    break;


                    case 83:
		    {
			ArrayList list = new83();
			push(goTo(18), list);
		    }
		    break;


                    case 84:
		    {
			ArrayList list = new84();
			push(goTo(18), list);
		    }
		    break;


                    case 85:
		    {
			ArrayList list = new85();
			push(goTo(18), list);
		    }
		    break;


                    case 86:
		    {
			ArrayList list = new86();
			push(goTo(18), list);
		    }
		    break;


                    case 87:
		    {
			ArrayList list = new87();
			push(goTo(18), list);
		    }
		    break;


                    case 88:
		    {
			ArrayList list = new88();
			push(goTo(19), list);
		    }
		    break;


                    case 89:
		    {
			ArrayList list = new89();
			push(goTo(20), list);
		    }
		    break;


                    case 90:
		    {
			ArrayList list = new90();
			push(goTo(20), list);
		    }
		    break;


                    case 91:
		    {
			ArrayList list = new91();
			push(goTo(21), list);
		    }
		    break;


                    case 92:
		    {
			ArrayList list = new92();
			push(goTo(21), list);
		    }
		    break;


                    case 93:
		    {
			ArrayList list = new93();
			push(goTo(22), list);
		    }
		    break;


                    case 94:
		    {
			ArrayList list = new94();
			push(goTo(22), list);
		    }
		    break;


                    case 95:
		    {
			ArrayList list = new95();
			push(goTo(23), list);
		    }
		    break;


                    case 96:
		    {
			ArrayList list = new96();
			push(goTo(23), list);
		    }
		    break;


                    case 97:
		    {
			ArrayList list = new97();
			push(goTo(23), list);
		    }
		    break;


                    case 98:
		    {
			ArrayList list = new98();
			push(goTo(23), list);
		    }
		    break;


                    case 99:
		    {
			ArrayList list = new99();
			push(goTo(24), list);
		    }
		    break;


                    case 100:
		    {
			ArrayList list = new100();
			push(goTo(25), list);
		    }
		    break;


                    case 101:
		    {
			ArrayList list = new101();
			push(goTo(25), list);
		    }
		    break;


                    case 102:
		    {
			ArrayList list = new102();
			push(goTo(26), list);
		    }
		    break;


                    case 103:
		    {
			ArrayList list = new103();
			push(goTo(27), list);
		    }
		    break;


                    case 104:
		    {
			ArrayList list = new104();
			push(goTo(27), list);
		    }
		    break;


                    case 105:
		    {
			ArrayList list = new105();
			push(goTo(28), list);
		    }
		    break;


                    case 106:
		    {
			ArrayList list = new106();
			push(goTo(28), list);
		    }
		    break;


                    case 107:
		    {
			ArrayList list = new107();
			push(goTo(29), list);
		    }
		    break;


                    case 108:
		    {
			ArrayList list = new108();
			push(goTo(29), list);
		    }
		    break;


                    case 109:
		    {
			ArrayList list = new109();
			push(goTo(30), list);
		    }
		    break;


                    case 110:
		    {
			ArrayList list = new110();
			push(goTo(30), list);
		    }
		    break;


                    case 111:
		    {
			ArrayList list = new111();
			push(goTo(31), list);
		    }
		    break;


                    case 112:
		    {
			ArrayList list = new112();
			push(goTo(31), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommand pcommandNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pcommandNode1 = new AFunctionCommand(pfunctionNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommand pcommandNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandNode1 = new AStatementCommand(pstatementNode2);
        }
	nodeList.add(pcommandNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        PIdentifier pidentifierNode2;
        Object nullNode3 = null;
        PStatement pstatementNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunction(pidentifierNode2, null, pstatementNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        PIdentifier pidentifierNode2;
        PArgument pargumentNode3;
        PStatement pstatementNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pargumentNode3 = (PArgument)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunction(pidentifierNode2, pargumentNode3, pstatementNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        pargumentNode1 = new ASingleArgument(pidentifierNode2);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        PValue pvalueNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList3.get(0);

        pargumentNode1 = new ASingleAssignArgument(pidentifierNode2, pvalueNode3);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PArgument pargumentNode2;
        PIdentifier pidentifierNode3;
        Object nullNode4 = null;
        pargumentNode2 = (PArgument)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);

        pargumentNode1 = new AManyArgument(pargumentNode2, pidentifierNode3, null);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PArgument pargumentNode2;
        PIdentifier pidentifierNode3;
        PValue pvalueNode4;
        pargumentNode2 = (PArgument)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
        pvalueNode4 = (PValue)nodeArrayList4.get(0);

        pargumentNode1 = new AManyArgument(pargumentNode2, pidentifierNode3, pvalueNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }

        pimportpackageNode1 = new ASimpleImportImportPackage(pmoduleNode2, null, listNode4);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        PIdentifier pidentifierNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
        {
        }

        pimportpackageNode1 = new ASimpleImportImportPackage(pmoduleNode2, pidentifierNode3, listNode4);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pimportpackageNode1 = new ASimpleImportImportPackage(pmoduleNode2, null, listNode5);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        PIdentifier pidentifierNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pimportpackageNode1 = new ASimpleImportImportPackage(pmoduleNode2, pidentifierNode3, listNode5);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList4.get(0);
        {
        }
        {
        }

        pimportpackageNode1 = new ASpecificImportImportPackage(pmoduleNode2, listNode3, pidentifierNode4, listNode5, listNode6);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        PIdentifier pidentifierNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        PIdentifier pidentifierNode3;
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
	if(pidentifierNode3 != null)
	{
	  listNode4.add(pidentifierNode3);
	}
        }
        pidentifierNode5 = (PIdentifier)nodeArrayList5.get(0);
        {
        }
        {
        }

        pimportpackageNode1 = new ASpecificImportImportPackage(pmoduleNode2, listNode4, pidentifierNode5, listNode6, listNode7);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList4.get(0);
        {
        PIdentifier pidentifierNode5;
        pidentifierNode5 = (PIdentifier)nodeArrayList5.get(0);
	if(pidentifierNode5 != null)
	{
	  listNode6.add(pidentifierNode5);
	}
        }
        {
        }

        pimportpackageNode1 = new ASpecificImportImportPackage(pmoduleNode2, listNode3, pidentifierNode4, listNode6, listNode7);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        PIdentifier pidentifierNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        PIdentifier pidentifierNode3;
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
	if(pidentifierNode3 != null)
	{
	  listNode4.add(pidentifierNode3);
	}
        }
        pidentifierNode5 = (PIdentifier)nodeArrayList5.get(0);
        {
        PIdentifier pidentifierNode6;
        pidentifierNode6 = (PIdentifier)nodeArrayList6.get(0);
	if(pidentifierNode6 != null)
	{
	  listNode7.add(pidentifierNode6);
	}
        }
        {
        }

        pimportpackageNode1 = new ASpecificImportImportPackage(pmoduleNode2, listNode4, pidentifierNode5, listNode7, listNode8);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList4.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pimportpackageNode1 = new ASpecificImportImportPackage(pmoduleNode2, listNode3, pidentifierNode4, listNode5, listNode7);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        PIdentifier pidentifierNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        PIdentifier pidentifierNode3;
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
	if(pidentifierNode3 != null)
	{
	  listNode4.add(pidentifierNode3);
	}
        }
        pidentifierNode5 = (PIdentifier)nodeArrayList5.get(0);
        {
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pimportpackageNode1 = new ASpecificImportImportPackage(pmoduleNode2, listNode4, pidentifierNode5, listNode6, listNode8);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList4.get(0);
        {
        PIdentifier pidentifierNode5;
        pidentifierNode5 = (PIdentifier)nodeArrayList5.get(0);
	if(pidentifierNode5 != null)
	{
	  listNode6.add(pidentifierNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pimportpackageNode1 = new ASpecificImportImportPackage(pmoduleNode2, listNode3, pidentifierNode4, listNode6, listNode8);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PImportPackage pimportpackageNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        PIdentifier pidentifierNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        PIdentifier pidentifierNode3;
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
	if(pidentifierNode3 != null)
	{
	  listNode4.add(pidentifierNode3);
	}
        }
        pidentifierNode5 = (PIdentifier)nodeArrayList5.get(0);
        {
        PIdentifier pidentifierNode6;
        pidentifierNode6 = (PIdentifier)nodeArrayList6.get(0);
	if(pidentifierNode6 != null)
	{
	  listNode7.add(pidentifierNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pimportpackageNode1 = new ASpecificImportImportPackage(pmoduleNode2, listNode4, pidentifierNode5, listNode7, listNode9);
        }
	nodeList.add(pimportpackageNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentifier pidentifierNode1;
        pidentifierNode1 = (PIdentifier)nodeArrayList2.get(0);
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModule pmoduleNode1;
        {
        PIdentifier pidentifierNode2;
        PModule pmoduleNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pmoduleNode3 = (PModule)nodeArrayList3.get(0);

        pmoduleNode1 = new AMultiModule(pidentifierNode2, pmoduleNode3);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PModule pmoduleNode1;
        {
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        pmoduleNode1 = new ASingleModule(pidentifierNode2);
        }
	nodeList.add(pmoduleNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaModule pcommamoduleNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        }

        pcommamoduleNode1 = new ACommaModule(pmoduleNode2, listNode3);
        }
	nodeList.add(pcommamoduleNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaModule pcommamoduleNode1;
        {
        PModule pmoduleNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pmoduleNode2 = (PModule)nodeArrayList2.get(0);
        {
        PIdentifier pidentifierNode3;
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
	if(pidentifierNode3 != null)
	{
	  listNode4.add(pidentifierNode3);
	}
        }

        pcommamoduleNode1 = new ACommaModule(pmoduleNode2, listNode4);
        }
	nodeList.add(pcommamoduleNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PIdentifier pidentifierNode3;
        PStatement pstatementNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(pidentifierNode2, pidentifierNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PIdentifier pidentifierNode3;
        PStatement pstatementNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList3.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(pidentifierNode2, pidentifierNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PArglist parglistNode2;
        parglistNode2 = (PArglist)nodeArrayList2.get(0);

        pstatementNode1 = new APrintStatement(parglistNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PArglist parglistNode2;
        parglistNode2 = (PArglist)nodeArrayList3.get(0);

        pstatementNode1 = new APrintStatement(parglistNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatement(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AMineqStatement(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AMineqStatement(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new ADiveqStatement(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new ADiveqStatement(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new AArraycellStatement(pidentifierNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new AAssertStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new AAssertStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
	if(pexpressionNode3 != null)
	{
	  listNode4.add(pexpressionNode3);
	}
        }

        pstatementNode1 = new AAssertStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
	if(pexpressionNode3 != null)
	{
	  listNode4.add(pexpressionNode3);
	}
        }

        pstatementNode1 = new AAssertStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFunctioncallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFunctioncallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PImportPackage pimportpackageNode2;
        pimportpackageNode2 = (PImportPackage)nodeArrayList1.get(0);

        pstatementNode1 = new AImportStatement(pimportpackageNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALenExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AListExpressionExpression(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PArrayExpression parrayexpressionNode2;
        parrayexpressionNode2 = (PArrayExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AArrayExpression(parrayexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArrayExpression parrayexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        parrayexpressionNode1 = new ASingleArrayExpression(pexpressionNode2);
        }
	nodeList.add(parrayexpressionNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArrayExpression parrayexpressionNode1;
        {
        PArrayExpression parrayexpressionNode2;
        PExpression pexpressionNode3;
        parrayexpressionNode2 = (PArrayExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        parrayexpressionNode1 = new AManyArrayExpression(parrayexpressionNode2, pexpressionNode3);
        }
	nodeList.add(parrayexpressionNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultiplicationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivisionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AModuloExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AExponentiationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFunctioncallExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pexpressionNode1 = new AValueExpression(pvalueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(pidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList3.get(0);
        {
        }

        pexpressionNode1 = new AMaxExpression(pvalueNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AMaxExpression(pvalueNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList3.get(0);
        {
        }

        pexpressionNode1 = new AMinExpression(pvalueNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AMinExpression(pvalueNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        pcomparisonNode1 = (PComparison)nodeArrayList1.get(0);
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PComparison pcomparisonNode2;
        PComparison pcomparisonNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        pcomparisonNode3 = (PComparison)nodeArrayList3.get(0);

        pcomparisonNode1 = new AOrcComparison(pcomparisonNode2, pcomparisonNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        pcomparisonNode1 = (PComparison)nodeArrayList1.get(0);
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PComparison pcomparisonNode2;
        PComparison pcomparisonNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        pcomparisonNode3 = (PComparison)nodeArrayList3.get(0);

        pcomparisonNode1 = new AAndcComparison(pcomparisonNode2, pcomparisonNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        pcomparisonNode1 = (PComparison)nodeArrayList1.get(0);
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PComparison pcomparisonNode2;
        pcomparisonNode2 = (PComparison)nodeArrayList2.get(0);

        pcomparisonNode1 = new ANotcComparison(pcomparisonNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ALesscComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new AGreatcComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ALeqcComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new AGeqcComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANeqcComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new AEqcComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {

        pcomparisonNode1 = new ATrueComparison();
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {

        pcomparisonNode1 = new AFalseComparison();
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList2.get(0);
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new89()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        parglistNode1 = new AOneArglist(pexpressionNode2);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new90()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PArglist parglistNode2;
        PExpression pexpressionNode3;
        parglistNode2 = (PArglist)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        parglistNode1 = new AManyArglist(parglistNode2, pexpressionNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new91()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaIdAsId pcommaidasidNode1;
        {
        PIdentifier pidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        {
        }

        pcommaidasidNode1 = new ACommaIdAsId(pidentifierNode2, listNode3);
        }
	nodeList.add(pcommaidasidNode1);
        return nodeList;
    }



    ArrayList new92()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaIdAsId pcommaidasidNode1;
        {
        PIdentifier pidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        {
        PIdentifier pidentifierNode3;
        pidentifierNode3 = (PIdentifier)nodeArrayList3.get(0);
	if(pidentifierNode3 != null)
	{
	  listNode4.add(pidentifierNode3);
	}
        }

        pcommaidasidNode1 = new ACommaIdAsId(pidentifierNode2, listNode4);
        }
	nodeList.add(pcommaidasidNode1);
        return nodeList;
    }



    ArrayList new93()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        PIdentifier pidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
        }

        pfunctioncallNode1 = new AFunctionCall(pidentifierNode2, listNode3);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new94()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        PIdentifier pidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
        PArglist parglistNode3;
        parglistNode3 = (PArglist)nodeArrayList3.get(0);
	if(parglistNode3 != null)
	{
	  listNode4.add(parglistNode3);
	}
        }

        pfunctioncallNode1 = new AFunctionCall(pidentifierNode2, listNode4);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new95()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        PIdentifier pidentifierNode2;
        PFunctionCall pfunctioncallNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList3.get(0);

        pvalueNode1 = new AFuncCallValue(pidentifierNode2, pfunctioncallNode3);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new96()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList1.get(0);
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new97()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalueNode1 = new AStringValue(tstringNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new98()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {

        pvalueNode1 = new ANoneValue();
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new99()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList2.get(0);
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new100()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalueNode1 = new APosNumValue(tnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new101()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList2.get(0);

        pvalueNode1 = new ANegNumValue(tnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new102()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentifier pidentifierNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentifierNode1 = new AIdentifier(tidNode2);
        }
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    ArrayList new103()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommand pcommandNode1;
        pcommandNode1 = (PCommand)nodeArrayList1.get(0);
	if(pcommandNode1 != null)
	{
	  listNode2.add(pcommandNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new104()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommand pcommandNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommandNode2 = (PCommand)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandNode2 != null)
	{
	  listNode3.add(pcommandNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new105()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaModule pcommamoduleNode1;
        pcommamoduleNode1 = (PCommaModule)nodeArrayList1.get(0);
	if(pcommamoduleNode1 != null)
	{
	  listNode2.add(pcommamoduleNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new106()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaModule pcommamoduleNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommamoduleNode2 = (PCommaModule)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommamoduleNode2 != null)
	{
	  listNode3.add(pcommamoduleNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new107()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaIdAsId pcommaidasidNode1;
        pcommaidasidNode1 = (PCommaIdAsId)nodeArrayList1.get(0);
	if(pcommaidasidNode1 != null)
	{
	  listNode2.add(pcommaidasidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new108()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaIdAsId pcommaidasidNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommaidasidNode2 = (PCommaIdAsId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaidasidNode2 != null)
	{
	  listNode3.add(pcommaidasidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new109()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new110()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new111()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList1.get(0);
	if(pvalueNode1 != null)
	{
	  listNode2.add(pvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new112()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PValue pvalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvalueNode2 != null)
	{
	  listNode3.add(pvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {10, SHIFT, 2}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 2}, {52, SHIFT, 11}, },
			{{-1, ERROR, 3}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {31, SHIFT, 27}, {33, SHIFT, 28}, {38, SHIFT, 29}, {43, SHIFT, 30}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 4}, {52, SHIFT, 11}, },
			{{-1, ERROR, 5}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {31, SHIFT, 27}, {33, SHIFT, 28}, {38, SHIFT, 29}, {43, SHIFT, 30}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 6}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 7}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 8}, {52, SHIFT, 11}, },
			{{-1, ERROR, 9}, {52, SHIFT, 11}, },
			{{-1, ERROR, 10}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 12}, {54, ACCEPT, -1}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 18}, {7, SHIFT, 55}, {12, SHIFT, 56}, {14, SHIFT, 57}, {49, SHIFT, 58}, {50, SHIFT, 59}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {10, SHIFT, 2}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, ERROR, 20}, {0, SHIFT, 61}, {19, SHIFT, 62}, {22, SHIFT, 63}, {24, SHIFT, 64}, {25, SHIFT, 65}, {26, SHIFT, 66}, {39, SHIFT, 67}, {52, SHIFT, 11}, },
			{{-1, ERROR, 21}, {12, SHIFT, 70}, },
			{{-1, ERROR, 22}, {51, SHIFT, 71}, },
			{{-1, ERROR, 23}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 24}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 25}, {12, SHIFT, 75}, },
			{{-1, ERROR, 26}, {12, SHIFT, 76}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 29}, {12, SHIFT, 77}, },
			{{-1, ERROR, 30}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {31, SHIFT, 27}, {33, SHIFT, 28}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 34}, {1, SHIFT, 79}, {2, SHIFT, 80}, {29, SHIFT, 81}, {30, SHIFT, 82}, {45, SHIFT, 83}, {46, SHIFT, 84}, {47, SHIFT, 85}, {48, SHIFT, 86}, },
			{{-1, REDUCE, 51}, {3, SHIFT, 87}, {4, SHIFT, 88}, {5, SHIFT, 89}, {6, SHIFT, 90}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 38}, {32, SHIFT, 91}, {42, SHIFT, 92}, },
			{{-1, REDUCE, 74}, {41, SHIFT, 93}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 68}, {12, SHIFT, 56}, {14, SHIFT, 94}, {40, SHIFT, 95}, },
			{{-1, ERROR, 46}, {23, SHIFT, 96}, },
			{{-1, ERROR, 47}, {32, SHIFT, 97}, {42, SHIFT, 92}, },
			{{-1, REDUCE, 89}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 35}, {16, SHIFT, 98}, },
			{{-1, REDUCE, 33}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 10}, {16, SHIFT, 99}, {36, SHIFT, 100}, },
			{{-1, REDUCE, 24}, {40, SHIFT, 104}, },
			{{-1, ERROR, 53}, {35, SHIFT, 105}, {36, SHIFT, 100}, },
			{{-1, REDUCE, 44}, {1, SHIFT, 79}, {2, SHIFT, 80}, {16, SHIFT, 107}, },
			{{-1, ERROR, 55}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 56}, {2, SHIFT, 22}, {12, SHIFT, 23}, {13, SHIFT, 110}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 57}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 58}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 59}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 62}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {31, SHIFT, 27}, {33, SHIFT, 28}, {38, SHIFT, 29}, {43, SHIFT, 30}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 63}, {52, SHIFT, 11}, },
			{{-1, ERROR, 64}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {31, SHIFT, 27}, {33, SHIFT, 28}, {38, SHIFT, 29}, {43, SHIFT, 30}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 65}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 66}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 67}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 69}, {7, SHIFT, 121}, {12, SHIFT, 56}, {49, SHIFT, 122}, {50, SHIFT, 123}, },
			{{-1, ERROR, 70}, {13, SHIFT, 124}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 72}, {1, SHIFT, 79}, {2, SHIFT, 80}, {13, SHIFT, 127}, },
			{{-1, REDUCE, 59}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, ERROR, 74}, {15, SHIFT, 128}, {16, SHIFT, 129}, },
			{{-1, ERROR, 75}, {2, SHIFT, 22}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 76}, {2, SHIFT, 22}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 77}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 79}, {2, SHIFT, 22}, {12, SHIFT, 23}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 80}, {2, SHIFT, 22}, {12, SHIFT, 23}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 81}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 82}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 83}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 84}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 85}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 86}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 87}, {2, SHIFT, 22}, {12, SHIFT, 23}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 88}, {2, SHIFT, 22}, {12, SHIFT, 23}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 89}, {2, SHIFT, 22}, {12, SHIFT, 23}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 90}, {2, SHIFT, 22}, {12, SHIFT, 23}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 91}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, ERROR, 92}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {31, SHIFT, 27}, {33, SHIFT, 28}, {38, SHIFT, 29}, {43, SHIFT, 30}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 93}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {31, SHIFT, 27}, {33, SHIFT, 28}, {38, SHIFT, 29}, {43, SHIFT, 30}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 94}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 95}, {52, SHIFT, 11}, },
			{{-1, ERROR, 96}, {52, SHIFT, 11}, },
			{{-1, ERROR, 97}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, ERROR, 98}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 99}, {52, SHIFT, 11}, },
			{{-1, ERROR, 100}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 11}, {16, SHIFT, 99}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 12}, {16, SHIFT, 99}, },
			{{-1, ERROR, 104}, {52, SHIFT, 11}, },
			{{-1, ERROR, 105}, {52, SHIFT, 11}, },
			{{-1, ERROR, 106}, {35, SHIFT, 162}, },
			{{-1, ERROR, 107}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 37}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 111}, {13, SHIFT, 164}, {16, SHIFT, 98}, },
			{{-1, ERROR, 112}, {1, SHIFT, 79}, {2, SHIFT, 80}, {15, SHIFT, 165}, },
			{{-1, REDUCE, 39}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 41}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, ERROR, 115}, {32, SHIFT, 166}, {42, SHIFT, 92}, },
			{{-1, ERROR, 116}, {23, SHIFT, 167}, },
			{{-1, ERROR, 117}, {32, SHIFT, 168}, {42, SHIFT, 92}, },
			{{-1, REDUCE, 36}, {16, SHIFT, 98}, },
			{{-1, REDUCE, 34}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 45}, {1, SHIFT, 79}, {2, SHIFT, 80}, {16, SHIFT, 107}, },
			{{-1, ERROR, 121}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 122}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 123}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 124}, {32, SHIFT, 173}, },
			{{-1, ERROR, 125}, {13, SHIFT, 174}, {16, SHIFT, 175}, },
			{{-1, REDUCE, 6}, {7, SHIFT, 176}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 129}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, ERROR, 130}, {13, SHIFT, 178}, {16, SHIFT, 179}, },
			{{-1, ERROR, 131}, {40, SHIFT, 95}, },
			{{-1, ERROR, 132}, {13, SHIFT, 182}, {16, SHIFT, 179}, },
			{{-1, ERROR, 133}, {1, SHIFT, 79}, {2, SHIFT, 80}, {13, SHIFT, 184}, },
			{{-1, REDUCE, 52}, {3, SHIFT, 87}, {4, SHIFT, 88}, {5, SHIFT, 89}, {6, SHIFT, 90}, },
			{{-1, REDUCE, 68}, {12, SHIFT, 56}, {40, SHIFT, 95}, },
			{{-1, REDUCE, 53}, {3, SHIFT, 87}, {4, SHIFT, 88}, {5, SHIFT, 89}, {6, SHIFT, 90}, },
			{{-1, REDUCE, 80}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 81}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 83}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 82}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 84}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 85}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 75}, {41, SHIFT, 93}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 150}, {1, SHIFT, 79}, {2, SHIFT, 80}, {15, SHIFT, 185}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 152}, {12, SHIFT, 56}, },
			{{-1, ERROR, 153}, {32, SHIFT, 186}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 90}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 25}, {36, SHIFT, 100}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 13}, {16, SHIFT, 99}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 14}, {16, SHIFT, 188}, {36, SHIFT, 100}, },
			{{-1, ERROR, 162}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 58}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 165}, {7, SHIFT, 193}, },
			{{-1, ERROR, 166}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, ERROR, 167}, {52, SHIFT, 11}, },
			{{-1, ERROR, 168}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 38}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 40}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 42}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, ERROR, 173}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, ERROR, 174}, {32, SHIFT, 198}, },
			{{-1, ERROR, 175}, {52, SHIFT, 11}, },
			{{-1, ERROR, 176}, {2, SHIFT, 22}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 60}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 179}, {2, SHIFT, 22}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 181}, {13, SHIFT, 202}, {16, SHIFT, 179}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 183}, {13, SHIFT, 204}, {16, SHIFT, 179}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 186}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 188}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 16}, {16, SHIFT, 188}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 18}, {16, SHIFT, 188}, },
			{{-1, REDUCE, 15}, {16, SHIFT, 188}, {36, SHIFT, 100}, },
			{{-1, ERROR, 193}, {2, SHIFT, 22}, {12, SHIFT, 23}, {14, SHIFT, 24}, {27, SHIFT, 25}, {28, SHIFT, 26}, {38, SHIFT, 29}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 195}, {32, SHIFT, 212}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 198}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 8}, {7, SHIFT, 214}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 91}, {36, SHIFT, 100}, },
			{{-1, REDUCE, 20}, {16, SHIFT, 188}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 17}, {16, SHIFT, 188}, },
			{{-1, REDUCE, 19}, {16, SHIFT, 188}, },
			{{-1, REDUCE, 43}, {1, SHIFT, 79}, {2, SHIFT, 80}, },
			{{-1, ERROR, 212}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {24, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {35, SHIFT, 8}, {37, SHIFT, 9}, {39, SHIFT, 10}, {52, SHIFT, 11}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 214}, {2, SHIFT, 22}, {44, SHIFT, 31}, {51, SHIFT, 32}, {52, SHIFT, 11}, {53, SHIFT, 33}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 21}, {16, SHIFT, 188}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 99}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 12}, },
			{{-1, 13}, {19, 60}, },
			{{-1, 14}, },
			{{-1, 125}, },
			{{-1, 15}, },
			{{-1, 101}, {53, 106}, {156, 187}, {161, 189}, {192, 209}, {206, 216}, },
			{{-1, 51}, {9, 53}, {99, 156}, {104, 160}, },
			{{-1, 102}, {103, 159}, {158, 159}, },
			{{-1, 16}, {91, 147}, {97, 154}, {166, 194}, {168, 196}, {173, 197}, {186, 205}, {198, 213}, {212, 218}, },
			{{-1, 34}, {6, 48}, {7, 50}, {10, 54}, {23, 72}, {24, 73}, {55, 109}, {56, 48}, {57, 112}, {58, 113}, {59, 114}, {65, 48}, {66, 119}, {67, 120}, {77, 133}, {81, 137}, {82, 138}, {83, 139}, {84, 140}, {85, 141}, {86, 142}, {94, 150}, {98, 155}, {107, 163}, {121, 170}, {122, 171}, {123, 172}, {129, 177}, {193, 211}, },
			{{-1, 108}, {120, 169}, },
			{{-1, 74}, },
			{{-1, 35}, {79, 134}, {80, 136}, },
			{{-1, 36}, {87, 143}, {88, 144}, {89, 145}, {90, 146}, },
			{{-1, 37}, },
			{{-1, 38}, {5, 47}, {62, 115}, {64, 117}, },
			{{-1, 39}, {92, 148}, },
			{{-1, 40}, {93, 149}, },
			{{-1, 41}, {30, 78}, },
			{{-1, 180}, {181, 203}, {183, 203}, },
			{{-1, 49}, {56, 111}, {65, 118}, },
			{{-1, 190}, {191, 208}, {207, 208}, {210, 208}, {217, 208}, },
			{{-1, 42}, {0, 17}, {19, 17}, {20, 68}, {91, 17}, {95, 151}, {97, 17}, {166, 17}, {168, 17}, {173, 17}, {186, 17}, {198, 17}, {212, 17}, },
			{{-1, 43}, {75, 130}, {76, 132}, {176, 200}, {179, 201}, {214, 219}, },
			{{-1, 215}, },
			{{-1, 44}, },
			{{-1, 45}, {0, 18}, {2, 21}, {4, 46}, {8, 52}, {9, 52}, {19, 18}, {20, 69}, {63, 116}, {70, 126}, {75, 131}, {76, 131}, {79, 135}, {80, 135}, {87, 135}, {88, 135}, {89, 135}, {90, 135}, {91, 18}, {95, 152}, {96, 153}, {97, 18}, {99, 52}, {100, 157}, {104, 52}, {105, 161}, {162, 192}, {166, 18}, {167, 195}, {168, 18}, {173, 18}, {175, 199}, {176, 131}, {179, 131}, {186, 18}, {188, 206}, {198, 18}, {212, 18}, {214, 131}, },
			{{-1, 19}, },
			{{-1, 103}, {101, 158}, },
			{{-1, 191}, {189, 207}, {192, 210}, {209, 217}, },
			{{-1, 20}, },
			{{-1, 181}, {132, 183}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'def', 'if', 'for', 'while', 'print', 'return', 'import', 'from', 'assert', id, EOF",
			"expecting: tab, 'if', 'for', 'while', 'print', 'return', 'assert', id",
			"expecting: id",
			"expecting: '-', '(', '[', 'max', 'min', 'true', 'false', 'len', 'not', 'None', number, id, string",
			"expecting: '-', '(', '[', 'max', 'min', 'len', 'None', number, id, string",
			"expecting: tab, '+', '-', '*', '**', '/', '%', '=', 'def', '(', ')', '[', ']', ',', 'if', 'for', 'in', 'while', 'print', 'return', '<', '>', ':', 'import', 'as', 'from', 'assert', '.', 'and', 'or', '>=', '<=', '!=', '==', '-=', '/=', id, EOF",
			"expecting: EOF",
			"expecting: '=', '(', '[', '-=', '/='",
			"expecting: '('",
			"expecting: number",
			"expecting: ':', 'and', 'or'",
			"expecting: '-', '(', '[', 'max', 'min', 'true', 'false', 'len', 'None', number, id, string",
			"expecting: tab, '+', '-', '*', '**', '/', '%', 'def', ')', ']', ',', 'if', 'for', 'while', 'print', 'return', '<', '>', ':', 'import', 'from', 'assert', 'and', 'or', '>=', '<=', '!=', '==', id, EOF",
			"expecting: '+', '-', '<', '>', '>=', '<=', '!=', '=='",
			"expecting: tab, '+', '-', 'def', ')', ']', ',', 'if', 'for', 'while', 'print', 'return', '<', '>', ':', 'import', 'from', 'assert', 'and', 'or', '>=', '<=', '!=', '==', id, EOF",
			"expecting: ':', 'or'",
			"expecting: tab, '+', '-', '*', '**', '/', '%', 'def', '(', ')', '[', ']', ',', 'if', 'for', 'while', 'print', 'return', '<', '>', ':', 'import', 'from', 'assert', '.', 'and', 'or', '>=', '<=', '!=', '==', id, EOF",
			"expecting: 'in'",
			"expecting: tab, '+', '-', 'def', ')', ',', 'if', 'for', 'while', 'print', 'return', 'import', 'from', 'assert', id, EOF",
			"expecting: tab, 'def', ',', 'if', 'for', 'while', 'print', 'return', 'import', 'from', 'assert', id, EOF",
			"expecting: tab, '+', '-', 'def', 'if', 'for', 'while', 'print', 'return', 'import', 'from', 'assert', id, EOF",
			"expecting: tab, 'def', ',', 'if', 'for', 'while', 'print', 'return', 'import', 'as', 'from', 'assert', id, EOF",
			"expecting: tab, 'def', ',', 'if', 'for', 'while', 'print', 'return', 'import', 'as', 'from', 'assert', '.', id, EOF",
			"expecting: 'import', 'as'",
			"expecting: tab, '+', '-', 'def', ',', 'if', 'for', 'while', 'print', 'return', 'import', 'from', 'assert', id, EOF",
			"expecting: '-', '(', ')', '[', 'max', 'min', 'len', 'None', number, id, string",
			"expecting: '=', '(', '-=', '/='",
			"expecting: ')', id",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ']', ','",
			"expecting: ']', ','",
			"expecting: '-', 'None', number, id, string",
			"expecting: '-', '(', 'None', number, id, string",
			"expecting: tab, 'if', 'for', 'while', 'print', 'return', 'import', 'from', 'assert', id",
			"expecting: 'import'",
			"expecting: ')', ','",
			"expecting: '+', '-', ']'",
			"expecting: ':'",
			"expecting: '=', ')', ','",
			"expecting: '.'",
			"expecting: tab, '+', '-', '*', '**', '/', '%', 'def', '(', ')', ']', ',', 'if', 'for', 'while', 'print', 'return', '<', '>', ':', 'import', 'from', 'assert', '.', 'and', 'or', '>=', '<=', '!=', '==', id, EOF",
			"expecting: '+', '-', ':', 'and', 'or'",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 2, 3, 4, 4, 2, 2, 4, 5, 6, 0, 0, 0, 0, 0, 7, 0, 1, 8, 9, 4, 4, 8, 8, 10, 10, 8, 11, 12, 12, 12, 13, 12, 12, 14, 15, 10, 10, 10, 12, 12, 12, 16, 17, 15, 18, 19, 20, 21, 22, 23, 24, 4, 25, 4, 4, 4, 0, 1, 3, 2, 3, 4, 4, 4, 0, 26, 27, 12, 28, 29, 30, 31, 31, 4, 10, 32, 32, 4, 4, 4, 4, 4, 4, 32, 32, 32, 32, 33, 3, 3, 4, 2, 2, 33, 4, 2, 2, 19, 19, 19, 2, 2, 34, 4, 0, 20, 12, 35, 36, 20, 20, 15, 17, 15, 19, 20, 24, 4, 4, 4, 37, 35, 38, 12, 14, 4, 35, 39, 35, 28, 12, 40, 12, 41, 41, 41, 41, 41, 41, 12, 12, 12, 12, 0, 10, 10, 36, 12, 8, 37, 0, 18, 21, 19, 19, 19, 21, 21, 2, 20, 12, 42, 33, 2, 33, 0, 20, 20, 20, 33, 37, 2, 31, 29, 14, 31, 35, 35, 14, 35, 14, 14, 33, 19, 2, 19, 19, 19, 21, 4, 0, 37, 0, 0, 33, 38, 35, 35, 14, 35, 14, 0, 21, 19, 19, 19, 19, 20, 33, 0, 31, 35, 19, 19, 0, 35, 
        };*/
}
