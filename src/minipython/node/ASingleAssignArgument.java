/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ASingleAssignArgument extends PArgument
{
    private PIdentifier _identifier_;
    private PValue _value_;

    public ASingleAssignArgument()
    {
    }

    public ASingleAssignArgument(
        PIdentifier _identifier_,
        PValue _value_)
    {
        setIdentifier(_identifier_);

        setValue(_value_);

    }
    public Object clone()
    {
        return new ASingleAssignArgument(
            (PIdentifier) cloneNode(_identifier_),
            (PValue) cloneNode(_value_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASingleAssignArgument(this);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PValue getValue()
    {
        return _value_;
    }

    public void setValue(PValue node)
    {
        if(_value_ != null)
        {
            _value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _value_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_value_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_value_ == child)
        {
            _value_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

    }
}
