/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AForStatement extends PStatement
{
    private PIdentifier _lpar_;
    private PIdentifier _rpar_;
    private PStatement _statement_;

    public AForStatement()
    {
    }

    public AForStatement(
        PIdentifier _lpar_,
        PIdentifier _rpar_,
        PStatement _statement_)
    {
        setLpar(_lpar_);

        setRpar(_rpar_);

        setStatement(_statement_);

    }
    public Object clone()
    {
        return new AForStatement(
            (PIdentifier) cloneNode(_lpar_),
            (PIdentifier) cloneNode(_rpar_),
            (PStatement) cloneNode(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public PIdentifier getLpar()
    {
        return _lpar_;
    }

    public void setLpar(PIdentifier node)
    {
        if(_lpar_ != null)
        {
            _lpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lpar_ = node;
    }

    public PIdentifier getRpar()
    {
        return _rpar_;
    }

    public void setRpar(PIdentifier node)
    {
        if(_rpar_ != null)
        {
            _rpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rpar_ = node;
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lpar_)
            + toString(_rpar_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_lpar_ == child)
        {
            _lpar_ = null;
            return;
        }

        if(_rpar_ == child)
        {
            _rpar_ = null;
            return;
        }

        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lpar_ == oldChild)
        {
            setLpar((PIdentifier) newChild);
            return;
        }

        if(_rpar_ == oldChild)
        {
            setRpar((PIdentifier) newChild);
            return;
        }

        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

    }
}
