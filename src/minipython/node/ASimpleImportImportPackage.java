/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ASimpleImportImportPackage extends PImportPackage
{
    private PModule _module_;
    private PIdentifier _identifier_;
    private final LinkedList _commaModule_ = new TypedLinkedList(new CommaModule_Cast());

    public ASimpleImportImportPackage()
    {
    }

    public ASimpleImportImportPackage(
        PModule _module_,
        PIdentifier _identifier_,
        List _commaModule_)
    {
        setModule(_module_);

        setIdentifier(_identifier_);

        {
            this._commaModule_.clear();
            this._commaModule_.addAll(_commaModule_);
        }

    }
    public Object clone()
    {
        return new ASimpleImportImportPackage(
            (PModule) cloneNode(_module_),
            (PIdentifier) cloneNode(_identifier_),
            cloneList(_commaModule_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimpleImportImportPackage(this);
    }

    public PModule getModule()
    {
        return _module_;
    }

    public void setModule(PModule node)
    {
        if(_module_ != null)
        {
            _module_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _module_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public LinkedList getCommaModule()
    {
        return _commaModule_;
    }

    public void setCommaModule(List list)
    {
        _commaModule_.clear();
        _commaModule_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_module_)
            + toString(_identifier_)
            + toString(_commaModule_);
    }

    void removeChild(Node child)
    {
        if(_module_ == child)
        {
            _module_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_commaModule_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_module_ == oldChild)
        {
            setModule((PModule) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        for(ListIterator i = _commaModule_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class CommaModule_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaModule node = (PCommaModule) o;

            if((node.parent() != null) &&
                (node.parent() != ASimpleImportImportPackage.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ASimpleImportImportPackage.this))
            {
                node.parent(ASimpleImportImportPackage.this);
            }

            return node;
        }
    }
}
