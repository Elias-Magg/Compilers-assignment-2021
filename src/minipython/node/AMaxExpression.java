/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AMaxExpression extends PExpression
{
    private PValue _v1_;
    private final LinkedList _value_ = new TypedLinkedList(new Value_Cast());

    public AMaxExpression()
    {
    }

    public AMaxExpression(
        PValue _v1_,
        List _value_)
    {
        setV1(_v1_);

        {
            this._value_.clear();
            this._value_.addAll(_value_);
        }

    }
    public Object clone()
    {
        return new AMaxExpression(
            (PValue) cloneNode(_v1_),
            cloneList(_value_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMaxExpression(this);
    }

    public PValue getV1()
    {
        return _v1_;
    }

    public void setV1(PValue node)
    {
        if(_v1_ != null)
        {
            _v1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _v1_ = node;
    }

    public LinkedList getValue()
    {
        return _value_;
    }

    public void setValue(List list)
    {
        _value_.clear();
        _value_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_v1_)
            + toString(_value_);
    }

    void removeChild(Node child)
    {
        if(_v1_ == child)
        {
            _v1_ = null;
            return;
        }

        if(_value_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_v1_ == oldChild)
        {
            setV1((PValue) newChild);
            return;
        }

        for(ListIterator i = _value_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Value_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PValue node = (PValue) o;

            if((node.parent() != null) &&
                (node.parent() != AMaxExpression.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AMaxExpression.this))
            {
                node.parent(AMaxExpression.this);
            }

            return node;
        }
    }
}
