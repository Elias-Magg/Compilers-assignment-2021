/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ACommaIdAsId extends PCommaIdAsId
{
    private PIdentifier _first_;
    private final LinkedList _identifier_ = new TypedLinkedList(new Identifier_Cast());

    public ACommaIdAsId()
    {
    }

    public ACommaIdAsId(
        PIdentifier _first_,
        List _identifier_)
    {
        setFirst(_first_);

        {
            this._identifier_.clear();
            this._identifier_.addAll(_identifier_);
        }

    }
    public Object clone()
    {
        return new ACommaIdAsId(
            (PIdentifier) cloneNode(_first_),
            cloneList(_identifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACommaIdAsId(this);
    }

    public PIdentifier getFirst()
    {
        return _first_;
    }

    public void setFirst(PIdentifier node)
    {
        if(_first_ != null)
        {
            _first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _first_ = node;
    }

    public LinkedList getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(List list)
    {
        _identifier_.clear();
        _identifier_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_first_)
            + toString(_identifier_);
    }

    void removeChild(Node child)
    {
        if(_first_ == child)
        {
            _first_ = null;
            return;
        }

        if(_identifier_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_first_ == oldChild)
        {
            setFirst((PIdentifier) newChild);
            return;
        }

        for(ListIterator i = _identifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Identifier_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PIdentifier node = (PIdentifier) o;

            if((node.parent() != null) &&
                (node.parent() != ACommaIdAsId.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ACommaIdAsId.this))
            {
                node.parent(ACommaIdAsId.this);
            }

            return node;
        }
    }
}
