/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArraycellStatement extends PStatement
{
    private PIdentifier _identifier_;
    private PExpression _index_;
    private PExpression _val_;

    public AArraycellStatement()
    {
    }

    public AArraycellStatement(
        PIdentifier _identifier_,
        PExpression _index_,
        PExpression _val_)
    {
        setIdentifier(_identifier_);

        setIndex(_index_);

        setVal(_val_);

    }
    public Object clone()
    {
        return new AArraycellStatement(
            (PIdentifier) cloneNode(_identifier_),
            (PExpression) cloneNode(_index_),
            (PExpression) cloneNode(_val_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArraycellStatement(this);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PExpression getIndex()
    {
        return _index_;
    }

    public void setIndex(PExpression node)
    {
        if(_index_ != null)
        {
            _index_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _index_ = node;
    }

    public PExpression getVal()
    {
        return _val_;
    }

    public void setVal(PExpression node)
    {
        if(_val_ != null)
        {
            _val_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _val_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_index_)
            + toString(_val_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_index_ == child)
        {
            _index_ = null;
            return;
        }

        if(_val_ == child)
        {
            _val_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_index_ == oldChild)
        {
            setIndex((PExpression) newChild);
            return;
        }

        if(_val_ == oldChild)
        {
            setVal((PExpression) newChild);
            return;
        }

    }
}
