/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ASpecificImportImportPackage extends PImportPackage
{
    private PModule _module_;
    private final LinkedList _modAlias_ = new TypedLinkedList(new ModAlias_Cast());
    private PIdentifier _identifier_;
    private final LinkedList _packAlias_ = new TypedLinkedList(new PackAlias_Cast());
    private final LinkedList _commaIdAsId_ = new TypedLinkedList(new CommaIdAsId_Cast());

    public ASpecificImportImportPackage()
    {
    }

    public ASpecificImportImportPackage(
        PModule _module_,
        List _modAlias_,
        PIdentifier _identifier_,
        List _packAlias_,
        List _commaIdAsId_)
    {
        setModule(_module_);

        {
            this._modAlias_.clear();
            this._modAlias_.addAll(_modAlias_);
        }

        setIdentifier(_identifier_);

        {
            this._packAlias_.clear();
            this._packAlias_.addAll(_packAlias_);
        }

        {
            this._commaIdAsId_.clear();
            this._commaIdAsId_.addAll(_commaIdAsId_);
        }

    }
    public Object clone()
    {
        return new ASpecificImportImportPackage(
            (PModule) cloneNode(_module_),
            cloneList(_modAlias_),
            (PIdentifier) cloneNode(_identifier_),
            cloneList(_packAlias_),
            cloneList(_commaIdAsId_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASpecificImportImportPackage(this);
    }

    public PModule getModule()
    {
        return _module_;
    }

    public void setModule(PModule node)
    {
        if(_module_ != null)
        {
            _module_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _module_ = node;
    }

    public LinkedList getModAlias()
    {
        return _modAlias_;
    }

    public void setModAlias(List list)
    {
        _modAlias_.clear();
        _modAlias_.addAll(list);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public LinkedList getPackAlias()
    {
        return _packAlias_;
    }

    public void setPackAlias(List list)
    {
        _packAlias_.clear();
        _packAlias_.addAll(list);
    }

    public LinkedList getCommaIdAsId()
    {
        return _commaIdAsId_;
    }

    public void setCommaIdAsId(List list)
    {
        _commaIdAsId_.clear();
        _commaIdAsId_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_module_)
            + toString(_modAlias_)
            + toString(_identifier_)
            + toString(_packAlias_)
            + toString(_commaIdAsId_);
    }

    void removeChild(Node child)
    {
        if(_module_ == child)
        {
            _module_ = null;
            return;
        }

        if(_modAlias_.remove(child))
        {
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_packAlias_.remove(child))
        {
            return;
        }

        if(_commaIdAsId_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_module_ == oldChild)
        {
            setModule((PModule) newChild);
            return;
        }

        for(ListIterator i = _modAlias_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        for(ListIterator i = _packAlias_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _commaIdAsId_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ModAlias_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PIdentifier node = (PIdentifier) o;

            if((node.parent() != null) &&
                (node.parent() != ASpecificImportImportPackage.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ASpecificImportImportPackage.this))
            {
                node.parent(ASpecificImportImportPackage.this);
            }

            return node;
        }
    }

    private class PackAlias_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PIdentifier node = (PIdentifier) o;

            if((node.parent() != null) &&
                (node.parent() != ASpecificImportImportPackage.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ASpecificImportImportPackage.this))
            {
                node.parent(ASpecificImportImportPackage.this);
            }

            return node;
        }
    }

    private class CommaIdAsId_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaIdAsId node = (PCommaIdAsId) o;

            if((node.parent() != null) &&
                (node.parent() != ASpecificImportImportPackage.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ASpecificImportImportPackage.this))
            {
                node.parent(ASpecificImportImportPackage.this);
            }

            return node;
        }
    }
}
