//Σπυριδούλα Κουτσούκου, 3170080
//Μαγγίνας Ηλίας, 3170096
//Δουραχαλής Φίλιππος, 3170045

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 
    single_quote = 39;

Tokens
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	dmult = '**';
	div = '/';
	mod = '%';
	assign = '=';
	exclam = '!';
	dict = 'dict';
	def = 'def';
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma =',';
	qmark = '?';
	gqmark = ';';
	if = 'if';
	elif = 'elif';
	else = 'else';
	for = 'for';
	in = 'in';
	while = 'while';
	print = 'print';
	return = 'return';
	max = 'max';
	min = 'min';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	quote = '"';
	import = 'import';
	as = 'as';
	from = 'from';
	len = 'len';
	assert = 'assert';
	dot = '.';
	and = 'and';
	or = 'or';
	not = 'not';
	none = 'None';
	geq = '>=';
	leq = '<=';
	neq = '!=';
	equals = '==';
	min_eq = '-=';
	div_eq = '/=';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol;
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string = (('"'not_eol* '"') | (single_quote not_eol* single_quote));

Ignored Tokens
	blank, line_comment;


Productions

    goal = command* ;

    command = {function} function |
            {statement} statement ;

    function = def identifier l_par argument? r_par semi statement ;
= {single} identifier 
    argument ;

    import_package = {simple_import} import module as_id? comma_module*  |
                     {specific_import} from module [mod_alias]:as_id? import identifier [pack_alias]:as_id? comma_id_as_id* ;
    
	as_id ;

    module = {multi} identifier dot module  |
	 		 {single} identifier ;    

	comma_module = comma module as_id? ;

    statement = {if} tab* if comparison semi statement |
				{while} tab* while comparison semi statement |
				{for} tab* for [lpar]:identifier in [rpar]:identifier semi statement |
				{return} tab* return expression |
				{print} tab* print arglist |
				{assign} tab* identifier assign expression |
				{mineq} tab* identifier min_eq expression |
				{diveq} tab* identifier div_eq expression |
				{arraycell} identifier l_br [index]:expression r_br assign [val]:expression |
				{assert} tab* assert expression comma_expression? |
				{functioncall} tab* function_call |
                {import} import_package ;

    expression = {multiplication} multiplication |
					{addition} expression plus multiplication |
					{subtraction} expression minus multiplication |
                    {length} len l_par expression r_par |
                    {list_expression} identifier l_br expression r_br |
					{minmax} min_max_expression |
                    {array} l_br array_expression r_br ;

	comma_expression = comma expression ;

	array_expression  = {single} expression |
						 {many} array_expression comma expression ;

    multiplication = {something} something  |
				     {multiplication} multiplication mult something  |
                     {division} multiplication div something  |
                     {modulo} multiplication mod something |
                     {exp} multiplication dmult something ;

    something = {function_call} function_call |
                    {value} value |
                    {identifier} identifier |
                    {parenthenses} l_par expression r_par ;

    min_max_expression  = {max} max [lpar]:l_par value comma_value* [rpar]:r_par |
                       {min} min [lpar]:l_par value comma_value* [rpar]:r_par ;
					
	comparison  = {andc} and_comparison |
				 {orc} comparison or and_comparison ;
				 
	and_comparison  = {notc} not_comparison  |
								   {andc} and_comparison and not_comparison ;
	
	not_comparison  = {otherc} composite_comparison  |
								   {notc} not composite_comparison ;
	
	composite_comparison  = {lessc} [lpar]:expression less [rpar]:expression |
									 {greatc} [lpar]:expression great [rpar]:expression |
									 {leqc} [lpar]:expression leq [rpar]:expression |
									 {geqc} [lpar]:expression geq [rpar]:expression |
									 {neqc} [lpar]:expression neq [rpar]:expression |
									 {eqc} [lpar]:expression equals [rpar]:expression |
									 {true} true  |
									 {false} false ;

    comma_value = comma value ;
    
    arglist = {one} expression  | 
			  {many} arglist comma expression ;

    comma_id_as_id = comma identifier as_id? ;

	function_call = identifier l_par arglist? r_par ;

    value = {func_call} identifier dot function_call |
    			{number} real_number |
    			{string} string |
    			{none} none ;

	eq_val = assign value ;

    real_number = {positive} number |
                  {neg} minus number;
	
	identifier = id;